const{httpSearch,isHttp200,RestVerb,HttpError,RestAuthType}=C.internal.HttpUtils;const{PrometheusParser}=C.internal.Parsers;const{DiscoveryAdapterFactory}=C.internal.Adapters;exports.name="Prometheus";exports.version="0.1";exports.disabled=false;exports.destroyable=false;exports.hidden=true;let conf;let batchSize;let dimensions;exports.getParser=t=>new PrometheusParser(t.logger(),dimensions);exports.init=async t=>{conf=t.conf;batchSize=conf.maxBatchSize||10;dimensions=conf.dimensionList;DiscoveryAdapterFactory.create(conf).validate()};exports.discover=async t=>{try{const e=await DiscoveryAdapterFactory.create(conf,t.logger()).discoverTargets(t)||[];const r=[];for(const s of e){s.format="raw";r.push(s);if(r.length>=batchSize){await t.addResults(r);r.length=0}}if(r.length)await t.addResults(r)}catch(e){t.logger().error("Discover error",{error:e});throw e}};exports.collect=async(t,e)=>{const{username:r,password:s}=conf;const o=r&&s?RestAuthType.BASIC:RestAuthType.NONE;const a={url:t.source,method:RestVerb.GET,authType:o,username:r,password:s};const c=await httpSearch(a,e.logger());c.res.on("end",(()=>{if(!isHttp200(c.res.statusCode)){const t=new HttpError("http error",c.res.statusCode,{host:c.host,port:c.port,path:c.path,method:c.method});e.reportError(t).catch((()=>{}))}}));c.res.on("error",(t=>{e.reportError(t).catch((()=>{}))}));return c.res};