exports.name="Publish Metrics";exports.version="0.2";exports.group="Advanced";exports.sync=true;const cLogger=C.util.getLogger("func:publish_metrics");const{NestedPropertyAccessor}=C.expr;let _metricsConf;let _metricsToRemoveConf;let _dimensionsToAddConf;let _dimensionsToRemoveConf;let overwrite=false;exports.init=e=>{_metricsConf=undefined;_metricsToRemoveConf=undefined;_dimensionsToAddConf=undefined;_dimensionsToRemoveConf=undefined;const o=e.conf||{};if(o.fields){_metricsConf={values:[],nameExpr:[],types:[]};for(const e of o.fields){if(e&&e.inFieldName&&e.metricType){new NestedPropertyAccessor(e.inFieldName.trim());_metricsConf.values.push(e.inFieldName.trim());const o=e.metricType==="summary"||e.metricType==="histogram"?"_metric":undefined;e.outFieldExpr=e.outFieldExpr?e.outFieldExpr.trim():o;_metricsConf.nameExpr.push(e.outFieldExpr);_metricsConf.types.push(e.metricType)}}_metricsConf=_metricsConf.values.length?_metricsConf:undefined}overwrite=Boolean(o.overwrite);_metricsToRemoveConf=parseConf(o.removeMetrics,(e=>new C.util.WildcardList(Array.from(e))));_dimensionsToAddConf=parseConf(o.dimensions,(e=>Array.from(e)));_dimensionsToRemoveConf=parseConf(o.removeDimensions,(e=>new C.util.WildcardList(Array.from(e))));cLogger.info("Using config: ",{overwrite,_metricsConf,_dimensionsToAddConf,_dimensionsToRemoveConf})};function parseConf(e,o){let n;if(e){n=new Set;for(let o of e){o=o?o.trim():"";if(o)n.add(o)}n=n.size?o(n):undefined}return n}exports.unload=()=>{_metricsConf=undefined;_metricsToRemoveConf=undefined;_dimensionsToAddConf=undefined;_dimensionsToRemoveConf=undefined;overwrite=false};exports.process=e=>{if(_metricsConf===undefined&&_metricsToRemoveConf===undefined&&_dimensionsToAddConf===undefined&&_dimensionsToRemoveConf===undefined){return e}if(_metricsConf&&e.__criblMetrics&&Array.isArray(e.__criblMetrics)&&!overwrite){e.__criblMetrics.push(_metricsConf)}else if(_metricsConf){e.__criblMetrics=[_metricsConf]}if(e.__criblMetrics&&(_metricsToRemoveConf||_dimensionsToAddConf||_dimensionsToRemoveConf)){const o=[];for(let n=0;n<e.__criblMetrics.length;n++){let i=e.__criblMetrics[n];let s={values:[],nameExpr:[],types:[]};for(let e=0;e<i.values.length;e++){if(!_metricsToRemoveConf||!_metricsToRemoveConf.test(i.values[e])){if(i.nameExpr!=null)s.nameExpr.push(i.nameExpr[e]);s.values.push(i.values[e]);s.types.push(i.types[e])}}if(!s.values.length){continue}let r=[...i.dims||[]];if(_dimensionsToAddConf){if(overwrite){r=[..._dimensionsToAddConf]}else if(_metricsConf==null){r=Array.from(new Set([...r,..._dimensionsToAddConf]))}else if(_metricsConf&&n===e.__criblMetrics.length-1){r=[..._dimensionsToAddConf]}}if(_dimensionsToRemoveConf&&r.length){r=r.filter((e=>!_dimensionsToRemoveConf.test(e)))}const{dims:t,values:f,nameExpr:d,types:m,__metricAccessor:c,..._}=i;s={...s,..._};if(r.length)s.dims=r;o.push(s)}e.__criblMetrics=o.length?o:undefined}return e};